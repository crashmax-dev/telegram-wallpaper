const t=[0,.25,.5,.75,1,1.5,2,2.5,3,3.5,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,18.3,18.6,18.9,19.2,19.5,19.8,20.1,20.4,20.7,21,21.3,21.6,21.9,22.2,22.5,22.8,23.1,23.4,23.7,24,24.3,24.6,24.9,25.2,25.5,25.8,26.1,26.3,26.4,26.5,26.6,26.7,26.8,26.9,27],s=[{x:.8,y:.1},{x:.6,y:.2},{x:.35,y:.25},{x:.25,y:.6},{x:.2,y:.9},{x:.4,y:.8},{x:.65,y:.75},{x:.75,y:.4}];const i=new class{constructor({canvas:i,fps:h,animate:a,scrollAnimate:e}){this.width=50,this.height=50,this.phase=0,this.tail=0,this.tails=90,this.scrolltails=50,this.timestamp=100,this.fps=15,this.frametime=1e3/this.fps,this.scrollDelta=0,this.scrollTicking=!1,this.frames=[],this.colors=[],this.curve=t,this.positions=s,this.phases=s.length,this.interval=null,this.raf=null,i&&(this.init(i),void 0===h||isNaN(h)||(this.frametime=1e3/h),a&&this.animate(a),e&&this.scrollAnimate(e))}hexToRgb(t){const s=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return s?{r:parseInt(s[1],16),g:parseInt(s[2],16),b:parseInt(s[3],16)}:null}getPositions(t){const s=[...this.positions];for(;t>0;)s.push(s.shift()),t--;const i=[];for(let t=0;t<s.length;t+=2)i.push(s[t]);return i}curPosition(t,s){s%=this.tails;const i=this.getPositions(t%this.phases);if(s){const h=this.getPositions(++t%this.phases),a=(h[0].x-i[0].x)/this.tails,e=(h[0].y-i[0].y)/this.tails,n=(h[1].x-i[1].x)/this.tails,r=(h[1].y-i[1].y)/this.tails,l=(h[2].x-i[2].x)/this.tails,o=(h[2].y-i[2].y)/this.tails,c=(h[3].x-i[3].x)/this.tails,m=(h[3].y-i[3].y)/this.tails;return[{x:i[0].x+a*s,y:i[0].y+e*s},{x:i[1].x+n*s,y:i[1].y+r*s},{x:i[2].x+l*s,y:i[2].y+o*s},{x:i[3].x+c*s,y:i[3].y+m*s}]}return i}changeTail(t){for(this.tail+=t;this.tail>=this.tails;)this.tail-=this.tails,this.phase++,this.phase>=this.phases&&(this.phase-=this.phases);for(;this.tail<0;)this.tail+=this.tails,this.phase--,this.phase<0&&(this.phase+=this.phases)}onWheel(t){this.scrollDelta+=t.deltaY,this.scrollTicking||(requestAnimationFrame((()=>this.drawOnWheel())),this.scrollTicking=!0)}drawOnWheel(){let t=this.scrollDelta/this.scrolltails;if(this.scrollDelta%=this.scrolltails,t=t>0?Math.floor(t):Math.ceil(t),t){this.changeTail(t);const s=this.curPosition(this.phase,this.tail);this.drawGradient(s)}this.scrollTicking=!1}drawNextPositionAnimated(){if(this.frames.length>0){const t=this.frames.shift();this.drawImageData(t)}else this.interval&&clearInterval(this.interval)}getGradientImageData(t){const s=this.hctx.createImageData(this.width,this.height),i=s.data;let h=0;for(let s=0;s<this.height;s++){const a=s/this.height-.5,e=a*a;for(let s=0;s<this.width;s++){const n=s/this.width-.5,r=.35*Math.sqrt(n*n+e),l=r*r*6.4,o=Math.sin(l),c=Math.cos(l),m=Math.max(0,Math.min(1,.5+n*c-a*o)),x=Math.max(0,Math.min(1,.5+n*o+a*c));let d=0,g=0,u=0,y=0;for(let s=0;s<this.colors.length;s++){const i=m-t[s].x,h=x-t[s].y;let a=Math.max(0,.9-Math.sqrt(i*i+h*h));a*=a*a*a,d+=a,g+=a*this.colors[s].r/255,u+=a*this.colors[s].g/255,y+=a*this.colors[s].b/255}i[h++]=g/d*255,i[h++]=u/d*255,i[h++]=y/d*255,i[h++]=255}}return s}drawImageData(t){this.hctx.putImageData(t,0,0),this.ctx.drawImage(this.hc,0,0,50,50)}drawGradient(t){this.drawImageData(this.getGradientImageData(t))}doAnimate(){const t=+Date.now();if(!document.hasFocus()||t-this.timestamp<this.frametime)return void(this.raf=requestAnimationFrame((()=>this.doAnimate())));this.timestamp=t,this.changeTail(1);const s=this.curPosition(this.phase,this.tail);this.drawGradient(s),this.raf=requestAnimationFrame((()=>this.doAnimate()))}init(t){let s=t.getAttribute("data-colors")||"";s&&(s=s.split(","));for(let t=0;t<s.length;t++){const i=this.hexToRgb(s[t]);i&&this.colors.push(i)}this.hc||(this.hc=document.createElement("canvas"),this.hc.width=this.width,this.hc.height=this.height,this.hctx=this.hc.getContext("2d")),this.canvas=t,this.ctx=this.canvas.getContext("2d"),this.update()}update(){const t=this.curPosition(this.phase,this.tail);this.drawGradient(t)}toNextPosition(){if(!this.interval)return;clearInterval(this.interval),this.frames=[];const t=this.getPositions(this.phase%this.phases);this.phase++;const s=this.getPositions(this.phase%this.phases),i=27,h=(s[0].x-t[0].x)/i,a=(s[0].y-t[0].y)/i,e=(s[1].x-t[1].x)/i,n=(s[1].y-t[1].y)/i,r=(s[2].x-t[2].x)/i,l=(s[2].y-t[2].y)/i,o=(s[3].x-t[3].x)/i,c=(s[3].y-t[3].y)/i;for(let s=0;s<60;s++){const i=[{x:t[0].x+h*this.curve[s],y:t[0].y+a*this.curve[s]},{x:t[1].x+e*this.curve[s],y:t[1].y+n*this.curve[s]},{x:t[2].x+r*this.curve[s],y:t[2].y+l*this.curve[s]},{x:t[3].x+o*this.curve[s],y:t[3].y+c*this.curve[s]}];this.frames.push(this.getGradientImageData(i))}this.interval=setInterval((()=>{this.drawNextPositionAnimated()}),1e3/30)}animate(t){if(!t&&this.raf)return cancelAnimationFrame(this.raf);this.doAnimate()}scrollAnimate(t){document.onwheel=t?t=>this.onWheel(t):null}}({canvas:document.querySelector("canvas"),fps:60,animate:!0,scrollAnimate:!0});console.log(i);
//# sourceMappingURL=index.bc6629b1.js.map
